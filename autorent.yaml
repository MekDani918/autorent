openapi: 3.0.3
info:
  title: Autorent
  description: |-
    This is the documentation of the autorent backend api 

    _This is a school project for the system development 2023/24/2 class at PE university_
    
    Some useful links:
    - [Project repository](https://github.com/MekDani918/autorent)
  version: 1.0.0
servers:
  - url: https://127.0.0.1/
tags:
  - name: user
  - name: categories
  - name: cars
  - name: rentals
  - name: sales
paths:
  /login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Login and get JWT token
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user
                password:
                  type: string
                  example: 123
      responses:
        '200':
          description: successful operation
#          headers:
#            X-Expires-After:
#              description: date in UTC when token expires
#              schema:
#                type: string
#                format: date-time
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Auth successful'
                  token:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid username or password'
  /register:
    post:
      tags:
        - user
      summary: Registers user for the service
      description: ''
      operationId: registerUser
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user
                name:
                  type: string
                  example: James
                password:
                  type: string
                  example: 123
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Registration successful!'
        '400':
          description: Invalid data supplied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Username already taken!'
  /categories:
    get:
      tags:
        - categories
      summary: Returns list of available categories
      description: ''
      operationId: getCategories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
    post:
      tags:
        - categories
      summary: Creates new category
      description: ''
      operationId: createCategory
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Hatchback"
      security:
        - bearerAuth: []
      responses:
        '201':
          description: category created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '400':
          description: Category already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Category already exists!'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /categories/{categoryId}:
    delete:
      tags:
        - categories
      summary: Delete one category by id
      parameters:
        - name: categoryId
          in: path
          description: ID of category that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Deleted successfully!'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Category not found'
  /cars:
    get:
      tags:
        - cars
      summary: Returns list of available cars
      description: ''
      operationId: getCars
      parameters:
        - name: category
          in: query
          description: Category to filter by
          required: false
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
    post:
      tags:
        - cars
      summary: Create new car
      description: ''
      operationId: createCar
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                brand:
                  type: string
                  example: "Volkswagen"
                model:
                  type: string
                  example: "Golf"
                categoryId:
                  type: integer
                  example: 2
                dailyPrice:
                  type: integer
                  example: 10000
      security:
        - bearerAuth: []
      responses:
        '201':
          description: category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidData'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /cars/{carId}:
    get:
      tags:
        - cars
      summary: Returns one car by id
      parameters:
        - name: carId
          in: path
          description: ID of car that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Car not found'
    patch:
      tags:
        - cars
      summary: Update one car by id
      operationId: editCar
      parameters:
        - name: carId
          in: path
          description: ID of car that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                brand:
                  type: string
                  example: "Volkswagen"
                model:
                  type: string
                  example: "Golf"
                categoryId:
                  type: integer
                  example: 2
                dailyPrice:
                  type: integer
                  example: 10000
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Car not found'
    delete:
      tags:
        - cars
      summary: Delete one car by id
      parameters:
        - name: carId
          in: path
          description: ID of car that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Deleted successfully!'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Car not found'
  /rentals:
    get:
      tags:
        - rentals
      summary: Returns list of rentals associated with specified token
      description: ''
      operationId: getRentals
      parameters: []
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rental'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
    post:
      tags:
        - rentals
      summary: Rents specified car for specified interval
      description: ''
      operationId: rentCar
      requestBody:
        description: CarID + rent interval
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                carId:
                  type: integer
                  example: 11
                from:
                  type: string
                  example: "1711042568"
                to:
                  type: string
                  example: "1711483593"
      security:
        - bearerAuth: []
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Car rental successful'
                  id:
                    type: integer
                    example: 312
        '400':
          description: 'Car is not available for selected period'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Car is not available for selected period'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
  /sales:
    get:
      tags:
        - sales
      summary: Returns list of sales
      description: ''
      operationId: getSales
      parameters: []
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
    post:
      tags:
        - sales
      summary: Create new sale
      operationId: createSale
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                carId:
                  type: integer
                  example: 1
                description:
                  type: string
                  example: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla vehicula sollicitudin purus, id consequat dolor. Etiam tempor mi vitae mi viverra, vel ultrices tellus dictum. Aenean a risus eget lectus blandit fringilla. Quisque efficitur vestibulum purus'
                percent:
                  type: integer
                  example: 30
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Sale already exists for this car'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
  /sales/{carId}:
    delete:
      tags:
        - sales
      summary: Delete sale car by id
      parameters:
        - name: carId
          in: path
          description: ID of car that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Deleted successfully!'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Sale not found'
                
  
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Hatchback
    Car:
      type: object
      properties:
        id:
          type: integer
          example: 1
        category:
          type: string
          example: Hatchback
        brand:
          type: string
          example: Volkswagen
        model:
          type: string
          example: Golf
        dailyPrice:
          type: integer
          example: 10000
        discountPercentage:
          type: integer
          example: 10
        unavailableDates:
          type: array
          items:
            type: string
            example: '2024-03-21'
    Rental:
      type: object
      properties:
        car:
          $ref: '#/components/schemas/Car'
        fromDate:
          type: string
          example: "2024-03-20"
        toDate:
          type: string
          example: "2024-03-20"
        price:
          type: integer
          example: 9990
        rentalTimestamp:
          type: string
          example: "1711042568"
    Sale:
      type: object
      properties:
        car:
          $ref: '#/components/schemas/Car'
        description:
          type: string
          example: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla vehicula sollicitudin purus, id consequat dolor. Etiam tempor mi vitae mi viverra, vel ultrices tellus dictum. Aenean a risus eget lectus blandit fringilla. Quisque efficitur vestibulum purus'
        percent:
          type: integer
          example: 5
#    User:
#      type: object
#      properties:
#        id:
#          type: integer
#          format: int64
#          example: 10
#        username:
#          type: string
#          example: user
#        name:
#          type: string
#          example: theUser
#        password:
#          type: string
#          example: '123'
#        role:
#          type: string
#          example: 'user'
    InvalidData:
      type: object
      properties:
        message:
          type: string
          example: 'Invalid data supplied!'
    Unauthorized:
      type: object
      properties:
        message:
          type: string
          example: 'Invalid token'
    Forbidden:
      type: object
      properties:
        message:
          type: string
          example: 'Access denied!'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
