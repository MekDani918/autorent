openapi: 3.0.3
info:
  title: Autorent
  description: |-
    This is the documentation of the autorent backend api 

    _This is a school project for the system development 2023/24/2 class at PE university_
    
    Some useful links:
    - [Project repository](https://github.com/MekDani918/autorent)
  version: 1.0.0
servers:
  - url: https://127.0.0.1/
tags:
  - name: user
    description: Everything about users
  - name: cars
    description: Access to cars
  - name: rentals
    description: Operations about rentals
paths:
  /login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        description: Login and get JWT token
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestBody'
      responses:
        '200':
          description: successful operation
#          headers:
#            X-Expires-After:
#              description: date in UTC when token expires
#              schema:
#                type: string
#                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid username or password'
  /categories:
    get:
      tags:
        - cars
      summary: Returns list of available categories
      description: ''
      operationId: getCategories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
  /cars:
    get:
      tags:
        - cars
      summary: Returns list of available cars
      description: ''
      operationId: getCars
      parameters:
        - name: category
          in: query
          description: Category to filter by
          required: false
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
  /cars/{carId}:
    get:
      tags:
        - cars
      parameters:
        - name: carId
          in: path
          description: ID of car that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Car not found'
  /rentals:
    get:
      tags:
        - rentals
      summary: Returns list of rentals associated with specified token
      description: ''
      operationId: getRentals
      parameters: []
      security:
        - bearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rental'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
    post:
      tags:
        - rentals
      summary: Rents specified car for specified interval
      description: ''
      operationId: rentCar
      requestBody:
        description: CarID + rent interval
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentCarRequestBody'
      security:
        - bearerAuth: []
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalSuccessfulResponse'
        '400':
          description: 'Car is not available for selected period'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Car is not available for selected period'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
components:
  schemas:
    LoginRequestBody:
      type: object
      properties:
        username:
          type: string
          example: user
        password:
          type: string
          example: 123
    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Auth successful'
        token:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Hatchback
    Car:
      type: object
      properties:
        id:
          type: integer
          example: 1
        category:
          type: string
          example: Hatchback
        brand:
          type: string
          example: Volkswagen
        model:
          type: string
          example: Golf
        dailyPrice:
          type: integer
          example: 10000
        unavailableDates:
          type: array
          items:
            type: string
            example: '2024-03-21'
    Rental:
      type: object
      properties:
        car:
          $ref: '#/components/schemas/Car'
        fromDate:
          type: string
          example: "2024-03-20"
        toDate:
          type: string
          example: "2024-03-20"
        price:
          type: integer
          example: 9990
        rentalTimestamp:
          type: string
          example: "1711042568"
    RentCarRequestBody:
      type: object
      properties:
        carId:
          type: integer
          example: 11
        from:
          type: string
          example: "1711042568"
        to:
          type: string
          example: "1711483593"
    RentalSuccessfulResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Car rental successful'
        id:
          type: integer
          example: 312
    Unauthorized:
      type: object
      properties:
        message:
          type: string
          example: 'Invalid token'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: user
        name:
          type: string
          example: theUser
        password:
          type: string
          example: '123'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
